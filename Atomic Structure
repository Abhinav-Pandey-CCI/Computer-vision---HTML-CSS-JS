#Atomic structure with CV

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Atomic Hand Tracker - Neon Box + MP Style</title>
  <style>
    html, body {
      margin: 0;
      overflow: hidden;
      background: black;
    }
    video, canvas {
      position: absolute;
      top: 0;
      height: 100vh;
    }
    #video {
      right: 0;
      width: 40vw;
      object-fit: cover;
      transform: scaleX(-1);
      z-index: 0;
    }
    #canvas-left, #canvas-right {
      height: 100vh;
      z-index: 2;
      pointer-events: none;
    }
    #canvas-left {
      left: 0;
      width: 60vw;
    }
    #canvas-right {
      right: 0;
      width: 40vw;
    }
  </style>
</head>
<body>
  <video id="video" autoplay playsinline muted></video>
  <canvas id="canvas-left"></canvas>
  <canvas id="canvas-right"></canvas>

  <script type="module">
    import {
      HandLandmarker,
      FilesetResolver,
      DrawingUtils
    } from "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0";

    // HAND_CONNECTIONS manually copied from MediaPipe hands.js
    const HAND_CONNECTIONS = [
      [0, 1], [1, 2], [2, 3], [3, 4],       // Thumb
      [0, 5], [5, 6], [6, 7], [7, 8],       // Index
      [5, 9], [9,10], [10,11], [11,12],     // Middle
      [9,13], [13,14], [14,15], [15,16],    // Ring
      [13,17], [17,18], [18,19], [19,20],   // Pinky
      [0,17]                                // Palm base to pinky base
    ];

    const video = document.getElementById("video");
    const canvasLeft = document.getElementById("canvas-left");
    const canvasRight = document.getElementById("canvas-right");
    const ctxLeft = canvasLeft.getContext("2d");
    const ctxRight = canvasRight.getContext("2d");

    const drawer = new DrawingUtils(ctxRight);

    let handLandmarker;
    let landmarks = null;
    let fingerSpread = 0;

    const setup = async () => {
      canvasLeft.width = window.innerWidth * 0.6;
      canvasRight.width = window.innerWidth * 0.4;
      canvasLeft.height = canvasRight.height = window.innerHeight;

      const vision = await FilesetResolver.forVisionTasks(
        "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm"
      );

      handLandmarker = await HandLandmarker.createFromOptions(vision, {
        baseOptions: {
          modelAssetPath: https://storage.googleapis.com/mediapipe-models/hand_landmarker/hand_landmarker/float16/1/hand_landmarker.task,
          delegate: "GPU"
        },
        runningMode: "VIDEO",
        numHands: 1
      });

      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      video.srcObject = stream;

      requestAnimationFrame(update);
    };

    const update = () => {
      ctxLeft.clearRect(0, 0, canvasLeft.width, canvasLeft.height);
      ctxRight.clearRect(0, 0, canvasRight.width, canvasRight.height);

      if (handLandmarker && video.readyState === 4) {
        const results = handLandmarker.detectForVideo(video, performance.now());
        if (results.landmarks.length > 0) {
          landmarks = results.landmarks[0];
          const dx = landmarks[4].x - landmarks[20].x;
          const dy = landmarks[4].y - landmarks[20].y;
          fingerSpread = Math.sqrt(dx * dx + dy * dy);
        } else {
          landmarks = null;
          fingerSpread = 0;
        }
      }

      drawExplosionAndHand(canvasLeft, ctxLeft, false);
      drawExplosionAndHand(canvasRight, ctxRight, true);

      requestAnimationFrame(update);
    };

    const drawExplosionAndHand = (canvas, ctx, mirrored) => {
      if (!mirrored) {
        const cx = canvas.width / 2;
        const cy = canvas.height / 2;
        const spread = 150 + fingerSpread * 800;
        const particles = 30;

        for (let i = 0; i < particles; i++) {
          const angle = (i / particles) * 2 * Math.PI;
          const radius = spread + Math.sin(performance.now() / 300 + i) * 15;
          const x = cx + radius * Math.cos(angle);
          const y = cy + radius * Math.sin(angle);

          ctx.beginPath();
          ctx.moveTo(cx, cy);
          ctx.lineTo(x, y);
          ctx.strokeStyle = "rgba(255, 100, 0, 0.4)";
          ctx.lineWidth = 1.5;
          ctx.stroke();

          ctx.beginPath();
          ctx.arc(x, y, 4, 0, 2 * Math.PI);
          ctx.fillStyle = "cyan";
          ctx.fill();
        }

        ctx.beginPath();
        ctx.arc(cx, cy, 15 + fingerSpread * 100, 0, 2 * Math.PI);
        ctx.fillStyle = "gold";
        ctx.shadowColor = "red";
        ctx.shadowBlur = 20;
        ctx.fill();
        ctx.shadowBlur = 0;
      }

      if (!landmarks) return;

      const scaleX = canvas.width;
      const scaleY = canvas.height;

      // Draw neon box and proper connections on mirrored side
      if (mirrored) {
        let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
        const transformed = landmarks.map(pt => {
          const x = scaleX - pt.x * scaleX;
          const y = pt.y * scaleY;
          if (x < minX) minX = x;
          if (x > maxX) maxX = x;
          if (y < minY) minY = y;
          if (y > maxY) maxY = y;
          return { x, y };
        });

        const padding = 20;
        ctx.beginPath();
        ctx.strokeStyle = "#00ffff";
        ctx.lineWidth = 2;
        ctx.shadowColor = "#00ffff";
        ctx.shadowBlur = 15;
        ctx.rect(minX - padding, minY - padding, (maxX - minX) + 2 * padding, (maxY - minY) + 2 * padding);
        ctx.stroke();
        ctx.shadowBlur = 0;

        for (const [start, end] of HAND_CONNECTIONS) {
          const a = transformed[start];
          const b = transformed[end];
          ctx.beginPath();
          ctx.moveTo(a.x, a.y);
          ctx.lineTo(b.x, b.y);
          ctx.strokeStyle = "#00ff00";
          ctx.lineWidth = 2;
          ctx.stroke();
        }

        for (const pt of transformed) {
          ctx.beginPath();
          ctx.arc(pt.x, pt.y, 3, 0, Math.PI * 2);
          ctx.fillStyle = "#ff0000";
          ctx.fill();
        }

      } else {
        // Default web-style lines on explosion side
        ctx.strokeStyle = "lime";
        ctx.lineWidth = 1.2;

        for (let i = 0; i < landmarks.length; i++) {
          for (let j = i + 1; j < landmarks.length; j++) {
            const a = landmarks[i];
            const b = landmarks[j];
            const ax = a.x * scaleX;
            const bx = b.x * scaleX;
            const ay = a.y * scaleY;
            const by = b.y * scaleY;

            ctx.beginPath();
            ctx.moveTo(ax, ay);
            ctx.lineTo(bx, by);
            ctx.stroke();
          }
        }

        for (const point of landmarks) {
          const x = point.x * scaleX;
          const y = point.y * scaleY;
          ctx.beginPath();
          ctx.arc(x, y, 3, 0, Math.PI * 2);
          ctx.fillStyle = "lime";
          ctx.fill();
        }
      }
    };

    setup();
  </script>
</body>
</html>
